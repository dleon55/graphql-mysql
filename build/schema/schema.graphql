type Query {
  "Lista de desarroladores"
  users: [User!]!
  "Desarrollador seleccionado mediante el ID"
  user(id: ID!): User
  "Lista de lenguajes programación"
  languages: [Language!]!
  "Lenguaje de programación seleccionado mediante el ID"
  language(id: ID!): Language
  "Consulta de certificado"
  certificadoPorFolio(folio: String!): Certificado

}

type Mutation {
  "Añadir usuario"
  addUser(user: UserInput!): String
  "Añadir lenguaje"
  addLanguage(name: String!): String
  "Actualizar usuario seleccionado mediante ID"
  updateUser(user: UserInput!): String
  "Actualizar lenguaje de programación seleccionado mediante ID"
  updateLanguage(id: ID!, name: String!): String
  "Eliminar usuario seleccionado mediante ID"
  deleteUser(id: ID!): String
  "Actualizar lenguaje de programación seleccionado mediante ID"
  deleteLanguage(id: ID!): String
}

type Certificado {
  remesa: Int
  idPlantel: Int
  rvoe: String
  estatus: String
  folio: String
  literal: String
  tipoCertificado: String
  nombre: String
  numeroMatricula: String
  institucionEmisora: String
  plantel: String
  claveCentroTrabajo: String
  planEstudios: String
  promedio: Float
  promedioLiteral: String
  creditosObtenidos: String
  periodoEstudios: PeriodoEstudios
  tipoDocumento: String
  fechaTimbrado: String
  correo: String
  telefono: String
}

type PeriodoEstudios {
  fechaInicio: String
  fechaFin: String
}


type TrayectoriaAcademica {
  planEstudios: String
  promedio: Float
  promedioLiteral: String
  creditosObtenidos: String
  periodoEstudios: PeriodoEstudios
  tipoDocumento: String
  estatus: String
  folio: String
  fechaTimbrado: String
}

type PeriodoEstudios {
  fechaInicio: String
  fechaFin: String
}

type Contacto {
  correo: String
  telefono: String
}
